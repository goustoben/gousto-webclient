---
version: 2.1

gousto_platform_image: &gousto_platform_image
    - image: ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GOUSTO_ENVIRONMENT}/circleci-image/platformdeploy:latest
      aws_auth:
        aws_access_key_id: $AWS_ERC_ACCESS_KEY
        aws_secret_access_key: $AWS_ERC_SECRET_KEY

circleci_node_image: &circleci_node_image
  - image: cimg/node:12.22.4
    user: root

circleci_node_browsers_image: &circleci_node_browsers_image #image has browser dependencies installed, but not browsers themselves
  - image: cimg/node:12.22.4-browsers
    user: root

orbs:
  browser-tools: circleci/browser-tools@1.1.3
  aws-cli: circleci/aws-cli@1.4.1

jobs:
  performance-budget:
    docker: *circleci_node_browsers_image
    steps:
      - checkout
      - browser-tools/install-chrome
      - run:
          name: Install Lighthouse CLI
          command: npm install -g @lhci/cli
      - run:
          name: Lease CI node access to public ALB
          working_directory: scripts
          command: source ~/.circlerc && ./lease-access.sh
      - run:
          name: Execute Lighthouse performance audit
          command: lhci autorun --config ./.lighthouserc.js
      - run:
          name: Cleanup CI IP access to ALB WAF
          when: always
          command: aws wafv2 update-ip-set --name $ipsetName --scope $ipsetScope --id $ipsetId --lock-token $nextLockToken --addresses $ipsetAddresses
      - store_artifacts:
          path: ./performance-budget-results
      - store_artifacts:
          path: ./lighthouseci

  jest-coverage-report:
    docker: *circleci_node_image
    resource_class: large
    working_directory: ~/project/mnt/ramdisk #removed it from the actual ramdisk directory as it uses too much system resources for jest to correctly run. When we can actually use a bigger node machine this can be moved back like the other steps
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Test coverage
          working_directory: src
          command: npm run test:jest:ci:coverage
          no_output_timeout: 30m
      - persist_to_workspace:
          root: ~/project
          paths:
            - mnt/ramdisk/src/coverage/coverage-summary.json

  eslint-generate-report:
    docker: *circleci_node_image
    resource_class: large
    working_directory: /mnt/ramdisk
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: /
      - run:
          name: eslint report
          working_directory: src
          command: scripts/run-eslint-ci.sh
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/src/eslint-results.json

  publish-code-health:
    docker: *circleci_node_image
    resource_class: large
    working_directory: /mnt/ramdisk
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Setup output folder
          command: mkdir /tmp/artifacts
      - run:
          name: Generate code health
          working_directory: src
          command: node ./scripts/print-code-health.js > /tmp/artifacts/${CODE_HEALTH_FILE_NAME}
      - store_artifacts:
          path: /tmp/artifacts


  setup-ci-variables-scripts-and-npm-dependencies:
    docker: *gousto_platform_image #stock image missing /gousto directory
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - run:
          name: Download platform deploy scripts and set the ENVIRONMENT variable from the branch name
          command: /gousto/platform-setup.sh
      - run:
          name: Set S3 Cloudfront URL
          command: |
            source ~/.circlerc && CLOUDFRONT_URL=$(python ./ci_scripts/describe_platform.py --name=content_output_assetsdistributiondomainname --region=$AWS_DEFAULT_REGION)
            echo "export CLOUDFRONT_URL=$CLOUDFRONT_URL" >> ~/.circlerc
      - run:
          name: Install npm dependencies
          workdir: src
          command: |
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            npm ci
            npm run postinstall
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup ECR
          command: source ~/.circlerc && python ./ci_scripts/create_image.py --setup
          no_output_timeout: 10m
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/src
            - mnt/ramdisk/tests
            - mnt/ramdisk/regression
            - mnt/ramdisk/ansible
            - mnt/ramdisk/cloudformation
            - mnt/ramdisk/service.yml
            - mnt/ramdisk/setup
            - mnt/ramdisk/scripts
            - mnt/ramdisk/ci_scripts
            - mnt/ramdisk/images
            - root/.circlerc

  build-webclient:
    docker: *circleci_node_image
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /
      - run:
          name: Setup environment and npm variables for build
          command: source ~/.circlerc && setup/setup-common.sh
      - run: echo $ENVIRONMENT
      - run:
          name: Build webclient
          working_directory: src
          command: source ~/.circlerc && NODE_CONFIG_ENV=${ENVIRONMENT} NODE_APP_INSTANCE="live" npm run build
      - run:
          name: Upload webclient resources to S3
          working_directory: src
          command: |
            source ~/.circlerc
            ASSETS_BUCKET="s3-gousto-${ENVIRONMENT}-assets"
            echo "${ASSETS_BUCKET}"
            npm config set goustowebclient_asset_bucket "${ASSETS_BUCKET}"
            npm run deploy
            npm run upload -- --upload_dir=${CI_BUILD_NUMBER}
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/src

  create-and-upload-webclient-docker-image-to-ecr:
    docker: *gousto_platform_image #stock image missing boto
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /
      - run:
          name: Create and upload webclient docker image to ECR
          command: source ~/.circlerc && python ./ci_scripts/create_image.py --name webclient
          no_output_timeout: 20m

  test-e2e:
    docker: *circleci_node_browsers_image
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Install CI dependencies
          command: apt-get -y update && apt-get -y install jq
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - aws-cli/setup:
          aws-access-key-id: AWS_ERC_ACCESS_KEY
          aws-secret-access-key: AWS_ERC_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Install E2E test dependencies
          working_directory: tests/e2e
          command: npm ci
      - run:
          name: Lease CI node access to public ALB
          working_directory: scripts
          command: source ~/.circlerc && ./lease-access.sh
      - run:
          name: Run E2E tests
          working_directory: tests/e2e
          command: npm run test:staging
      - store_test_results:
          path: tests/e2e/reports
      - store_artifacts:
          path: tests/e2e/reports
      - run:
          name: Cleanup CI IP access to ALB WAF
          when: always
          command: aws wafv2 update-ip-set --name $ipsetName --scope $ipsetScope --id $ipsetId --lock-token $nextLockToken --addresses $ipsetAddresses

  test-regression:
    docker: *circleci_node_browsers_image
    resource_class: large
    working_directory: /mnt/ramdisk/tests/regression
    parallelism: 5
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Export base url environment variable
          command: echo 'source ~/.circlerc && export CYPRESS_baseUrl=https://${ENVIRONMENT}-webclient.gousto.info' >> $BASH_ENV
          # This is a workaround for broken variable interpolation in version 2
          # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237/2
      - run:
          name: Run regression tests
          command: |
            ./node_modules/.bin/cypress run --spec "$(circleci tests glob "../../src/src/**/__regression__/*.spec.*" | circleci tests split | paste -sd "," -)" --reporter cypress-multi-reporters --reporter-options "configFile=reporterConfig.json"
          environment:
            CYPRESS_platform: web
            NODE_OPTIONS: --max-http-header-size=1000000
      - run:
          name: Create reports
          when: on_fail
          command: npm run report
      - store_test_results:
          path: /mnt/ramdisk/tests/regression/test_results/cypress
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/reports/html
          destination: ./
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/videos
          destination: ./

  test-regression-mobile:
    docker: *circleci_node_browsers_image
    resource_class: large
    working_directory: /mnt/ramdisk/tests/regression
    parallelism: 5
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Export base url environment variable
          command: echo 'source ~/.circlerc && export CYPRESS_baseUrl=https://${ENVIRONMENT}-webclient.gousto.info' >> $BASH_ENV
      - run:
          name: Run regression tests
          command: |
            ./node_modules/.bin/cypress run --spec "$(circleci tests glob "../../src/src/**/__regression__/*.spec.*" | circleci tests split | paste -sd "," -)" --reporter cypress-multi-reporters --reporter-options "configFile=reporterConfig.json"
          environment:
            CYPRESS_viewportWidth: 375
            CYPRESS_viewportHeight: 667
            CYPRESS_platform: mobile
            NODE_OPTIONS: --max-http-header-size=1000000
      - store_test_results:
          path: /mnt/ramdisk/tests/regression/test_results/cypress
      - run:
          name: Create reports
          when: on_fail
          command: npm run report
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/reports/html
          destination: ./
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/videos
          destination: ./

  deploy-infrastructure-and-webclient-image:
    docker: *gousto_platform_image #stock image missing boto
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Run Cloudformation to set up infrastructure and deploy the webclient image to ECS
          command: source ~/.circlerc && python ./ci_scripts/deploy_service.py --service webclient


  install-regression-test-dependencies:
    docker: *circleci_node_image
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Install regression test dependencies
          working_directory: tests/regression
          command: npm ci
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/tests/regression/node_modules
            - root/.cache/Cypress

workflows:
  version: 2

  performance-budget:
    jobs:
      - setup-ci-variables-scripts-and-npm-dependencies:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only: TECH-10-perf-budget
      - performance-budget:
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only:
                - TECH-10-perf-budget

  e2e-manual:
    jobs:
      - setup-ci-variables-scripts-and-npm-dependencies:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only:
                - e2e-manual
      - test-e2e:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - e2e-manual

  lower-environment:
    jobs:
      - setup-ci-variables-scripts-and-npm-dependencies:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only:
                - /^env-.*/
      - build-webclient:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - /^env-.*/
      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - /^env-.*/
      - deploy-infrastructure-and-webclient-image:
          context: gousto-beta-aws-app-circleci
          requires:
            - create-and-upload-webclient-docker-image-to-ecr
          filters:
            branches:
              only:
                - /^env-.*/
      - install-regression-test-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - /^env-.*/
      - test-regression:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-regression-test-dependencies
            - deploy-infrastructure-and-webclient-image #hopefully will be able to remove the dependency on deployed service with move to run against docker image
          filters:
            branches:
              only:
                - /^env-.*/
      - test-regression-mobile:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-regression-test-dependencies
            - deploy-infrastructure-and-webclient-image #hopefully will be able to remove the dependency on deployed service with move to run against docker image
          filters:
            branches:
              only:
                - /^env-.*/

  staging-environment:
    jobs:
      - setup-ci-variables-scripts-and-npm-dependencies:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only:
                - develop
      - build-webclient:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - develop
      - jest-coverage-report:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - develop
      - eslint-generate-report:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - develop
      - publish-code-health:
          context: gousto-beta-aws-app-circleci
          requires:
            - jest-coverage-report
            - eslint-generate-report
          filters:
            branches:
              only:
                - develop
      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient
            - jest-coverage-report
            - eslint-generate-report
          filters:
            branches:
              only:
                - develop
      - deploy-infrastructure-and-webclient-image:
          context: gousto-beta-aws-app-circleci
          requires:
            - create-and-upload-webclient-docker-image-to-ecr
          filters:
            branches:
              only:
                - develop
      - install-regression-test-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - develop
      - test-regression:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-regression-test-dependencies
            - deploy-infrastructure-and-webclient-image #hopefully will be able to remove the dependency on deployed service with move to run against docker image
          filters:
            branches:
              only:
                - develop
      - test-regression-mobile:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-regression-test-dependencies
            - deploy-infrastructure-and-webclient-image #hopefully will be able to remove the dependency on deployed service with move to run against docker image
          filters:
            branches:
              only:
                - develop
      - test-e2e:
          context: gousto-beta-aws-app-circleci
          requires:
            - deploy-infrastructure-and-webclient-image
          filters:
            branches:
              only:
                - develop

  production-environment:
    jobs:
      - setup-ci-variables-scripts-and-npm-dependencies:
          context: gousto-prod-aws-app-circleci
          filters:
            branches:
              only:
                - master
      - build-webclient:
          context: gousto-prod-aws-app-circleci
          requires:
            - setup-ci-variables-scripts-and-npm-dependencies
          filters:
            branches:
              only:
                - master
      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-prod-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - master
      - deploy-infrastructure-and-webclient-image:
          context: gousto-prod-aws-app-circleci
          requires:
            - create-and-upload-webclient-docker-image-to-ecr
          filters:
            branches:
              only:
                - master
