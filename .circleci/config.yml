---
version: 2.1

gousto_platform_image: &gousto_platform_image
    - image: ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GOUSTO_ENVIRONMENT}/circleci-image/platformdeploy:latest
      aws_auth:
        aws_access_key_id: $AWS_ERC_ACCESS_KEY
        aws_secret_access_key: $AWS_ERC_SECRET_KEY

circleci_node_image: &circleci_node_image
  - image: cimg/node:14.18.1
    user: root

circleci_node_browsers_image: &circleci_node_browsers_image #image has browser dependencies installed, but not browsers themselves
  - image: cimg/node:14.18.1-browsers
    user: root

orbs:
  browser-tools: circleci/browser-tools@1.1.3
  aws-cli: circleci/aws-cli@1.4.1

commands:
  gzip:
    description: "Apply gzip compression to text files"
    parameters:
      target:
        type: string
    steps:
      - run: echo "Compressing in << parameters.target >>. Initial size - $(du -sh << parameters.target >>)"
      - run: find << parameters.target >> -type f \( -iname '*.js' -or -iname '*.css' \) -exec gzip "{}" \; -exec mv "{}.gz" "{}" \;
      - run: echo "Size after compression - $(du -sh << parameters.target >>)"

  upload-to-s3:
    description: "Upload public dir to S3 bucket"
    parameters:
      bucket:
        type: string
      path:
        type: string
        default: src/public/
    steps:
      - run: echo "Uploading to << parameters.bucket >>"
      - run:
         name: Upload all text files, sets gzip content-encoding header
         command: aws s3 cp << parameters.path >> << parameters.bucket >> --exclude "*" --include "*.js" --include "*.css" --recursive --content-encoding gzip --cache-control max-age=315360000,no-transform,public --acl public-read
      - run:
         name: Upload binary files to S3, does not set gzip content-encoding header
         command: aws s3 cp << parameters.path >> << parameters.bucket >> --exclude "*.js" --exclude "*.css" --recursive --cache-control max-age=315360000,no-transform,public --acl public-read

jobs:
  setup-ci-variables-scripts:
    docker: *gousto_platform_image #stock image missing /gousto directory
    resource_class: medium
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - run:
          name: Download platform deploy scripts and set the ENVIRONMENT variable from the branch name
          command: /gousto/platform-setup.sh
      - run:
          name: Set S3 Cloudfront URL
          command: |
            source ~/.circlerc && CLOUDFRONT_URL=$(python ./ci_scripts/describe_platform.py --name=content_output_assetsdistributiondomainname --region=$AWS_DEFAULT_REGION)
            echo "export CLOUDFRONT_URL=$CLOUDFRONT_URL" >> ~/.circlerc
      - setup_remote_docker
      - run:
          name: Setup ECR
          command: source ~/.circlerc && python ./ci_scripts/create_image.py --setup
          no_output_timeout: 10m
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/src
            - mnt/ramdisk/tests
            - mnt/ramdisk/regression
            - mnt/ramdisk/ansible
            - mnt/ramdisk/cloudformation
            - mnt/ramdisk/service.yml
            - mnt/ramdisk/setup
            - mnt/ramdisk/scripts
            - mnt/ramdisk/ci_scripts
            - mnt/ramdisk/images
            - mnt/ramdisk/emulation-server
            - root/.circlerc

  install-src-dependencies:
    docker: *circleci_node_image
    resource_class: medium
    working_directory: /mnt/ramdisk
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Setup Github SSH access
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run:
          name: Install dependencies
          working_directory: src
          command: |
            npm ci
            npm run postinstall
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/src

  jest-coverage-report:
    docker: *circleci_node_image
    resource_class: medium
    working_directory: ~/project/mnt/ramdisk #removed it from the actual ramdisk directory as it uses too much system resources for jest to correctly run. When we can actually use a bigger node machine this can be moved back like the other steps
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Test coverage
          working_directory: src
          command: npm run test:jest:ci:coverage
      - run:
         name: typecheck tests
         working_directory: src
         command: npm run typecheck:tests
      - persist_to_workspace:
          root: ~/project
          paths:
            - mnt/ramdisk/src/coverage/coverage-summary.json

  eslint-generate-report:
    docker: *circleci_node_image
    resource_class: medium
    working_directory: /mnt/ramdisk
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: /
      - run:
          name: eslint report
          working_directory: src
          command: scripts/run-eslint-ci.sh
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/src/eslint-results.json

  publish-code-health:
    docker: *circleci_node_image
    resource_class: medium
    working_directory: /mnt/ramdisk
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Setup output folder
          command: mkdir /tmp/artifacts
      - run:
          name: Generate code health
          working_directory: src
          command: node ./scripts/print-code-health.js > /tmp/artifacts/${CODE_HEALTH_FILE_NAME}
      - store_artifacts:
          path: /tmp/artifacts

  build-webclient:
    docker: *circleci_node_image
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Setup environment and npm variables for build
          command: source ~/.circlerc && setup/setup-common.sh
      - run: echo $ENVIRONMENT
      - run:
          name: Build webclient
          working_directory: src
          command: source ~/.circlerc && NODE_CONFIG_ENV=${ENVIRONMENT} NODE_APP_INSTANCE="live" CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} npm run build
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/src

  upload-assets-to-s3:
    docker: *gousto_platform_image
    resource_class: medium
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      # The build puts its results into `dist` for server, and into `public`
      # for client.  The asset files in the latter are a superset of the ones
      # in former, except for the icon files.  We need those to appear at the
      # bucket, so before uploading we copy them into public (from which we do
      # the upload).
      - run:
          name: Make sure icon files will get uploaded
          command: cp src/dist/*.ico src/public
      - gzip:
          target: src/public
      - run:
          name: Set assets bucket variable
          command: |
            echo 'source ~/.circlerc && export ASSETS_BUCKET=s3://s3-gousto-${ENVIRONMENT}-assets/build' >> $BASH_ENV
      - upload-to-s3:
          bucket: ${ASSETS_BUCKET}/latest/
      - upload-to-s3:
          bucket: ${ASSETS_BUCKET}/${CI_BUILD_NUMBER}/

  create-and-upload-webclient-docker-image-to-ecr:
    docker: *gousto_platform_image #stock image missing boto
    resource_class: medium
    working_directory: /mnt/ramdisk
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Create and upload webclient docker image to ECR
          command: source ~/.circlerc && python ./ci_scripts/create_image.py --name webclient
          no_output_timeout: 20m

  test-e2e:
    docker: *circleci_node_browsers_image
    resource_class: medium
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Install CI dependencies
          command: apt-get -y update && apt-get -y install jq
      - browser-tools/install-chrome:
          chrome-version: 96.0.4664.110
      - browser-tools/install-chromedriver
      - aws-cli/setup:
          aws-access-key-id: AWS_ERC_ACCESS_KEY
          aws-secret-access-key: AWS_ERC_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Install E2E test dependencies
          working_directory: tests/e2e
          command: npm install --only=prod
      - run:
          name: Lease CI node access to public ALB
          working_directory: scripts
          command: source ~/.circlerc && ./lease-access.sh
      - run:
          name: Run E2E tests
          working_directory: tests/e2e
          command: chromedriver start & npm run test:staging
      - store_test_results:
          path: tests/e2e/reports
      - store_artifacts:
          path: tests/e2e/reports
      - run:
          name: Cleanup CI IP access to ALB WAF
          when: always
          command: aws wafv2 update-ip-set --name $ipsetName --scope $ipsetScope --id $ipsetId --lock-token $nextLockToken --addresses $ipsetAddresses

  test-regression:
    parameters:
      platform:
        type: string
      test_command:
        type: string
        default: ./node_modules/.bin/cypress run --spec "$(circleci tests glob "../../src/src/**/__regression__/*.spec.*" | circleci tests split | paste -sd "," -)" --reporter cypress-multi-reporters --reporter-options "configFile=reporterConfig.json"
      test_directory:
        type: string
        default: tests/regression
      application_base_url:
        type: string
        default: http://frontend.gousto.local:8080
      test_node_options:
        type: string
        default: --max-http-header-size=1000000
    docker: *circleci_node_browsers_image
    resource_class: large
    working_directory: /mnt/ramdisk
    parallelism: 5
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Create minimal config file
          command: 'echo "{\"running_env\": \"local\", \"checkout_pk\": \"${CHECKOUTCOM_PK_STAGING}\"}" > src/config/development-local.json5'
      - run:
          name: Build local application
          working_directory: src
          command: NODE_CONFIG_ENV=development NODE_APP_INSTANCE=local npm run build
      - run:
          name: Update local DNS configuration
          command: echo '127.0.0.1 frontend.gousto.local' >> /etc/hosts
      - run:
          name: Start local application
          working_directory: src
          command: NODE_CONFIG_ENV=development NODE_APP_INSTANCE=local npm run server
          background: true
      - run:
          name: Start emulation server
          working_directory: emulation-server
          command: npm start
          background: true
      - run:
          name: Wait for emulation server to be ready
          working_directory: scripts
          command: ./waitForHttpPath.sh 3000 /_config/state 10
      - run:
          name: Wait for application to be ready
          working_directory: scripts
          command: ./waitForHttpPath.sh 8080 / 10
      - when:
          condition:
            equal: [ web, << parameters.platform >> ]
          steps:
            - run:
                name: Run regression tests
                working_directory: << parameters.test_directory >>
                command: << parameters.test_command >>
                environment:
                  CYPRESS_baseUrl: << parameters.application_base_url >>
                  CYPRESS_platform: << parameters.platform >>
                  NODE_OPTIONS: << parameters.test_node_options >>
      - when:
          condition:
            equal: [ mobile, << parameters.platform >> ]
          steps:
            - run:
                name: Run regression tests
                working_directory: << parameters.test_directory >>
                command: << parameters.test_command >>
                environment:
                  CYPRESS_baseUrl: << parameters.application_base_url >>
                  CYPRESS_viewportWidth: 375
                  CYPRESS_viewportHeight: 667
                  CYPRESS_platform: << parameters.platform >>
                  NODE_OPTIONS: << parameters.test_node_options >>
      - run:
          name: Create reports
          when: on_fail
          working_directory: << parameters.test_directory >>
          command: npm run report
      - store_test_results:
          path: /mnt/ramdisk/tests/regression/test_results/cypress
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/reports/html
          destination: ./
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/videos
          destination: ./

  deploy-infrastructure-and-webclient-image:
    parameters:
      pact_canideploy_retry_attempts:
        type: integer
        default: 0
    docker: *gousto_platform_image #stock image missing boto
    resource_class: medium
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - when:
          condition:
            or:
              - equal: [ develop, << pipeline.git.branch >> ]
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Run pact can-i-deploy
                command: |
                  source ~/.circlerc && PACT_BROKER_TOKEN="${TEST_PACT_BROKER_TOKEN}" pact-broker can-i-deploy \
                    --pacticipant "${CIRCLE_PROJECT_REPONAME}" \
                    --version "${CIRCLE_SHA1}" \
                    --to-environment "${ENVIRONMENT}" \
                    --broker-base-url "${TEST_PACT_BROKER_BASE_URL}" \
                    --retry-while-unknown << parameters.pact_canideploy_retry_attempts >> \
                    --retry-interval 10

      - run:
          name: Run Cloudformation to set up infrastructure and deploy the webclient image to ECS
          command: source ~/.circlerc && python ./ci_scripts/deploy_service.py --service webclient
      - when:
          condition:
            or:
              - equal: [ develop, << pipeline.git.branch >> ]
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Run pact record-deployment
                command: |
                  source ~/.circlerc && PACT_BROKER_TOKEN="${TEST_PACT_BROKER_TOKEN}" pact-broker record-deployment \
                    --pacticipant "${CIRCLE_PROJECT_REPONAME}" \
                    --version "${CIRCLE_SHA1}" \
                    --environment "${ENVIRONMENT}" \
                    --broker-base-url "${TEST_PACT_BROKER_BASE_URL}"

  install-regression-test-dependencies:
    docker: *circleci_node_image
    resource_class: medium
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Install regression test dependencies
          working_directory: tests/regression
          command: npm ci
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/tests/regression/node_modules
            - root/.cache/Cypress

  publish-wip-pacts:
    docker: *gousto_platform_image
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: src
          command: |
            npm ci
            npm run postinstall
      - run:
          name: Run Gousto service adapter tests
          working_directory: src
          command: npm run test:gousto-adapters
      - run:
          name: Publish pact files
          command: |
            PACT_BROKER_TOKEN="${TEST_PACT_BROKER_TOKEN}" pact-broker publish pact/pacts \
              --consumer-app-version "${CIRCLE_SHA1}" \
              --broker-base-url "${TEST_PACT_BROKER_BASE_URL}" \
              --branch "${CIRCLE_BRANCH}" \
              --build-url "${CIRCLE_BUILD_URL}"


  publish-pacts:
    docker: *gousto_platform_image
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Publish pact files
          command: |
            PACT_BROKER_TOKEN="${TEST_PACT_BROKER_TOKEN}" pact-broker publish pact/pacts \
              --consumer-app-version "${CIRCLE_SHA1}" \
              --broker-base-url "${TEST_PACT_BROKER_BASE_URL}" \
              --branch "${CIRCLE_BRANCH}" \
              --build-url "${CIRCLE_BUILD_URL}"


  test-integration-adapters:
    docker: *circleci_node_image
    resource_class: large
    working_directory: /mnt/ramdisk/src
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Run Gousto service adapter tests
          command: npm run test:gousto-adapters
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/pact/pacts

  verify-emulation-server:
    docker: *circleci_node_image
    resource_class: large
    working_directory: /mnt/ramdisk/emulation-server
    steps:
      - attach_workspace:
          at: /
      - run:
          name: Install emulation server dependencies
          command: npm ci
      - run:
          name: Start emulation server
          background: true
          command: npm start
      - run:
          name: Wait for emulation server to be ready
          working_directory: /mnt/ramdisk/scripts
          command: ./waitForHttpPath.sh 3000 /_config/state 10
      - run:
          name: Verify emulation server satisfies Pact file expectations
          command: npm test
      - persist_to_workspace:
          root: /
          paths:
            - mnt/ramdisk/emulation-server

workflows:
  version: 2

  pull-request-branch:
    jobs:
      - publish-wip-pacts:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              ignore:
                - /^env-.*/
                - develop
                - master

  e2e-manual:
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only:
                - e2e-manual
      - test-e2e:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts
          filters:
            branches:
              only:
                - e2e-manual

  lower-environment:
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only:
                - /^env-.*/
      - install-src-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts
          filters:
            branches:
              only:
                - /^env-.*/
      - build-webclient:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-src-dependencies
          filters:
            branches:
              only:
                - /^env-.*/
      - upload-assets-to-s3:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - /^env-.*/
      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - /^env-.*/
      - deploy-infrastructure-and-webclient-image:
          name: deploy-infrastructure-and-webclient-image-to-lower-environment
          context: gousto-beta-aws-app-circleci
          requires:
            - create-and-upload-webclient-docker-image-to-ecr
            - upload-assets-to-s3
          filters:
            branches:
              only:
                - /^env-.*/

  staging-environment:
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-beta-aws-app-circleci
          filters:
            branches:
              only:
                - develop
      - install-src-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts
          filters:
            branches:
              only:
                - develop
      - build-webclient:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-src-dependencies
          filters:
            branches:
              only:
                - develop
      - upload-assets-to-s3:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - develop
      - jest-coverage-report:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-src-dependencies
          filters:
            branches:
              only:
                - develop
      - test-integration-adapters:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-src-dependencies
          filters:
            branches:
              only:
                - develop
      - verify-emulation-server:
          context: gousto-beta-aws-app-circleci
          requires:
            - test-integration-adapters
          filters:
            branches:
              only:
                - develop
      - publish-pacts:
          context: gousto-beta-aws-app-circleci
          requires:
            - verify-emulation-server
          filters:
            branches:
              only:
                - develop
      - eslint-generate-report:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-src-dependencies
          filters:
            branches:
              only:
                - develop
      - install-regression-test-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts
          filters:
            branches:
              only:
                - develop
      - test-regression:
          name: test-regression-web
          platform: web
          context: gousto-beta-aws-app-circleci
          requires:
            - install-src-dependencies
            - install-regression-test-dependencies
            - verify-emulation-server
          filters:
            branches:
              only:
                - develop
      - test-regression:
          name: test-regression-mobile
          platform: mobile
          context: gousto-beta-aws-app-circleci
          requires:
            - install-src-dependencies
            - install-regression-test-dependencies
            - verify-emulation-server
          filters:
            branches:
              only:
                - develop
      - publish-code-health:
          context: gousto-beta-aws-app-circleci
          requires:
            - jest-coverage-report
            - eslint-generate-report
          filters:
            branches:
              only:
                - develop
      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - develop
      - deploy-infrastructure-and-webclient-image:
          name: deploy-infrastructure-and-webclient-image-to-staging
          pact_canideploy_retry_attempts: 18
          context: gousto-beta-aws-app-circleci
          requires:
            - jest-coverage-report
            - eslint-generate-report
            - publish-pacts
            - test-regression-web
            - test-regression-mobile
            - create-and-upload-webclient-docker-image-to-ecr
            - upload-assets-to-s3
          filters:
            branches:
              only:
                - develop
      - test-e2e:
          context: gousto-beta-aws-app-circleci
          requires:
            - deploy-infrastructure-and-webclient-image-to-staging
            - verify-emulation-server
          filters:
            branches:
              only:
                - develop

  production-environment:
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-prod-aws-app-circleci
          filters:
            branches:
              only:
                - master
      - install-src-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts
          filters:
            branches:
              only:
                - master
      - test-integration-adapters:
          name: generate-pacts
          context: gousto-prod-aws-app-circleci
          requires:
            - install-src-dependencies
          filters:
            branches:
              only:
                - master
      - publish-pacts:
          context: gousto-prod-aws-app-circleci
          requires:
            - generate-pacts
          filters:
            branches:
              only:
                - master
      - build-webclient:
          context: gousto-prod-aws-app-circleci
          requires:
            - install-src-dependencies
          filters:
            branches:
              only:
                - master
      - upload-assets-to-s3:
          context: gousto-prod-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - master
      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-prod-aws-app-circleci
          requires:
            - build-webclient
          filters:
            branches:
              only:
                - master
      - deploy-infrastructure-and-webclient-image:
          name: deploy-infrastructure-and-webclient-image-to-production
          context: gousto-prod-aws-app-circleci
          requires:
            - publish-pacts
            - create-and-upload-webclient-docker-image-to-ecr
            - upload-assets-to-s3
          filters:
            branches:
              only:
                - master
