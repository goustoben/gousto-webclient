---
version: 2.1

# Hooks
filter-lower-env: &filter-lower-env
  filters:
    branches:
      only:
        - TECH-10-remove-circle-ramdisk

executors:
  gousto_platform_image:
    docker:
      - image: ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GOUSTO_ENVIRONMENT}/circleci-image/platformdeploy:latest
        aws_auth:
          aws_access_key_id: $AWS_ERC_ACCESS_KEY
          aws_secret_access_key: $AWS_ERC_SECRET_KEY
        environment:
          BODA: true

  gousto_node_image:
    docker:
      - image: ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GOUSTO_ENVIRONMENT}/circlecinode-image/node14:latest
        aws_auth:
          aws_access_key_id: $AWS_ERC_ACCESS_KEY
          aws_secret_access_key: $AWS_ERC_SECRET_KEY

  circleci_node_image:
    docker:
      - image: cimg/node:14.18.1
        user: root

  circleci_node_browsers_image:
    docker:
      - image: cimg/node:14.18.1-browsers
        user: root

orbs:
  browser-tools: circleci/browser-tools@1.1.3
  aws-cli: circleci/aws-cli@1.4.1

commands:
  gzip:
    description: "Apply gzip compression to text files"
    parameters:
      target:
        type: string
    steps:
      - run: echo "Compressing in << parameters.target >>. Initial size - $(du -sh << parameters.target >>)"
      - run: find << parameters.target >> -type f \( -iname '*.js' -or -iname '*.css' \) -exec gzip "{}" \; -exec mv "{}.gz" "{}" \;
      - run: echo "Size after compression - $(du -sh << parameters.target >>)"

  upload-to-s3:
    description: "Upload public dir to S3 bucket"
    parameters:
      bucket:
        type: string
      path:
        type: string
        default: src/apps/webclient/public/
    steps:
      - run: echo "Uploading to << parameters.bucket >>"
      - run:
          name: Upload all text files, sets gzip content-encoding header
          command: aws s3 cp << parameters.path >> << parameters.bucket >> --exclude "*" --include "*.js" --include "*.css" --recursive --content-encoding gzip --cache-control max-age=315360000,no-transform,public --acl public-read
      - run:
          name: Upload binary files to S3, does not set gzip content-encoding header
          command: aws s3 cp << parameters.path >> << parameters.bucket >> --exclude "*.js" --exclude "*.css" --recursive --cache-control max-age=315360000,no-transform,public --acl public-read

  codeartifact_authenticate:
    description: Authenticate with AWS CodeArtifact for Yarn 2.X+
    steps:
      - run:
          name: Authenticate with AWS CodeArtifact for Yarn 2.X+
          command: |
            yarn config unset npmScopes &&
            CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain gousto --domain-owner 472493421475 --query authorizationToken --output text` &&
            yarn config set npmRegistryServer "https://gousto-472493421475.d.codeartifact.eu-west-1.amazonaws.com/npm/proxy-repository/" &&
            yarn config set 'npmRegistries["https://gousto-472493421475.d.codeartifact.eu-west-1.amazonaws.com/npm/proxy-repository/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}" &&
            yarn config set 'npmRegistries["https://gousto-472493421475.d.codeartifact.eu-west-1.amazonaws.com/npm/proxy-repository/"].npmAlwaysAuth' "true"

  codeartifact_cleanup:
    description: Unset yarn config to prevent issues in other pipelines caused by image caching
    steps:
      - run:
          name: Clean up yarn config for CodeArtifact
          command: |
            yarn config unset npmRegistryServer &&
            yarn config unset npmScopes &&
            yarn config unset npmRegistries["https://gousto-472493421475.d.codeartifact.eu-west-1.amazonaws.com/npm/proxy-repository/"]
      - run:
          name: Clear yarn Cache
          command: yarn cache clear
      - run:
          name: Clear npm config
          command: npm config delete //gousto-472493421475.d.codeartifact.eu-west-1.amazonaws.com/npm/proxy-repository/

  export_circlerc_vars:
    description: Exports environment variables from .circlerc to BASH_ENV. Can be run once at the start of the job
    parameters:
      circlerc_path:
        type: string
        default: ~/.circlerc
    steps:
      - run: cat << parameters.circlerc_path >> >> $BASH_ENV

jobs:
  setup-ci-variables-scripts:
    executor: gousto_platform_image #stock image missing /gousto directory
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Download platform deploy scripts and set the ENVIRONMENT variable from the branch name
          command: /gousto/platform-setup.sh
      - setup_remote_docker
      - persist_to_workspace:
          root: /
          paths:
            - root/.circlerc

  install-dependencies:
    executor: gousto_node_image
    resource_class: medium
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: /
      - run:
          name: Setup Github SSH access
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - codeartifact_authenticate
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-develop-{{ checksum "yarn.lock" }}
            - yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
      - codeartifact_cleanup
      - persist_to_workspace:
          root: /
          paths:
            - ~/project

  test-typecheck-and-report:
    executor: circleci_node_image
    resource_class: medium+
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Typecheck (feature modules)
          command: yarn workspaces foreach --include '@features/*' --verbose run typecheck
      - run:
          name: Unit test (feature modules)
          command: yarn workspaces foreach --include '@features/*' --verbose run test:unit
      - run:
          name: Test, gather coverage (apps/webclient)
          working_directory: src/apps/webclient
          command: yarn test:jest:ci:coverage
      - run:
          name: Typecheck tests (apps/webclient)
          working_directory: src/apps/webclient
          command: yarn typecheck:tests
      - persist_to_workspace:
          root: /
          paths:
            - ~/project/src/apps/webclient/coverage/coverage-summary.json

  eslint-generate-report:
    executor: circleci_node_image
    resource_class: medium
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Lint (modules)
          command: yarn workspaces foreach --include '@features/*' --verbose run lint
      - run:
          name: Lint & gather report (apps/webclient)
          working_directory: src/apps/webclient
          command: scripts/run-eslint-ci.sh .
      - persist_to_workspace:
          root: /
          paths:
            - ~/project/src/apps/webclient/eslint-results.json

  publish-code-health:
    executor: circleci_node_image
    resource_class: medium
    environment:
      TZ: "Europe/London"
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup output folder
          command: mkdir /tmp/artifacts
      - run:
          name: Generate code health
          working_directory: src/apps/webclient
          command: node ./scripts/print-code-health.js > /tmp/artifacts/${CODE_HEALTH_FILE_NAME}
      - store_artifacts:
          path: ~/project/tmp/artifacts

  build-webclient:
    executor: circleci_node_image
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/
      - export_circlerc_vars
      - run:
          name: Build webclient
          working_directory: src/apps/webclient
          command: CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} npm run build
      - run:
          name: Persist CIRCLE_BUILD_NUM for s3 upload and sourcemaps jobs
          command: echo BUILD_JOB_BUILD_NUM=$CIRCLE_BUILD_NUM >> ~/.circlerc
      - persist_to_workspace:
          root: /
          paths:
            - ~/project/src/apps/webclient/dist
            - ~/project/src/apps/webclient/public
            - root/.circlerc

  upload-source-maps-to-datadog:
    executor: circleci_node_image
    parameters:
      env:
        type: enum
        enum: ["staging", "production"]
      top_level_domain:
        type: string
        default: .co.uk
    steps:
      - attach_workspace:
          at: ~/
      - export_circlerc_vars
      - run:
          name: Upload sourcemaps to datadog
          working_directory: src/apps/webclient
          command: |
            DATADOG_API_KEY="${DATADOG_SOURCE_MAPS_TOKEN}"
            DATADOG_SITE="datadoghq.eu"
            BUILD_DIR="./public"
            CIRCLE_BUILD_NUM="${BUILD_JOB_BUILD_NUM}"
            ASSET_URL_PREFIX="https://<< parameters.env >>-assets.gousto<< parameters.top_level_domain >>/build/${BUILD_JOB_BUILD_NUM}/"
            yarn datadog:upload-sourcemaps

  upload-assets-to-s3:
    executor: gousto_platform_image
    resource_class: medium
    parameters:
      env:
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - export_circlerc_vars
      # The build puts its results into `dist` for server, and into `public`
      # for client.  The asset files in the latter are a superset of the ones
      # in former, except for the icon files.  We need those to appear at the
      # bucket, so before uploading we copy them into public (from which we do
      # the upload).
      - run:
          name: Make sure icon files will get uploaded
          command: cp dist/*.ico public
          working_directory: src/apps/webclient
      - gzip:
          target: src/apps/webclient/public
      - run:
          name: Set assets bucket variable
          command: |
            echo 'export ASSETS_BUCKET=s3://s3-gousto-<< parameters.env >>-assets/build' >> $BASH_ENV
      - upload-to-s3:
          bucket: ${ASSETS_BUCKET}/${BUILD_JOB_BUILD_NUM}/

  create-and-upload-webclient-docker-image-to-ecr:
    executor: gousto_platform_image #stock image missing boto
    resource_class: medium
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - export_circlerc_vars
      - run:
          name: Create and upload webclient docker image to ECR
          command: python ./ci_scripts/create_image.py --name webclient
          no_output_timeout: 20m

  test-e2e:
    executor: circleci_node_browsers_image
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/
      - export_circlerc_vars
      - run:
          name: Install CI dependencies
          command: apt-get -y update && apt-get -y install jq
      - browser-tools/install-chrome:
          chrome-version: 101.0.4951.64
      - browser-tools/install-chromedriver
      - aws-cli/setup:
          aws-access-key-id: AWS_ERC_ACCESS_KEY
          aws-secret-access-key: AWS_ERC_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Lease CI node access to public ALB
          working_directory: scripts
          command: ./lease-access.sh
      - run:
          name: Find Datadog RUM sessions for E2E tests here ⬇️
          command: echo "https://datadoghq.eu/rum/explorer?query=%40application.id%3A7eaa558f-a187-40c5-b743-9fd52d7aff3a&tab=session&from_ts=1640000000000&to_ts=1740000000000&live=true"
      - run:
          name: Run E2E tests
          working_directory: tests/e2e
          command: chromedriver start & yarn test:staging
      - run:
          name: Upload reports to DataDog
          command: DATADOG_API_KEY="${DATADOG_SOURCE_MAPS_TOKEN}" DATADOG_SITE="datadoghq.eu" yarn datadog:upload-report:e2e
          when: always
      - store_test_results:
          path: tests/e2e/reports
      - store_artifacts:
          path: tests/e2e/reports
      - run:
          name: Cleanup CI IP access to ALB WAF
          when: always
          command: aws wafv2 update-ip-set --name $ipsetName --scope $ipsetScope --id $ipsetId --lock-token $nextLockToken --addresses $ipsetAddresses

  test-regression:
    parameters:
      platform:
        type: string
      test_command:
        type: string
        default: ./node_modules/.bin/cypress run --spec "$(circleci tests glob "../../src/apps/webclient/__regression__/*.spec.*" | circleci tests split | paste -sd "," -)" --reporter cypress-multi-reporters --reporter-options "configFile=reporterConfig.json"
      test_directory:
        type: string
        default: tests/regression
      application_base_url:
        type: string
        default: http://frontend.gousto.local:80
      test_node_options:
        type: string
        default: --max-http-header-size=1000000
    executor: circleci_node_browsers_image
    resource_class: large
    parallelism: 5
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Set env file
          command: mv src/apps/webclient/server/.env.regression src/apps/webclient/server/.env
      - run:
          name: Build local application
          working_directory: src/apps/webclient
          command: npm run build
      - run:
          name: Update local DNS configuration
          command: echo '127.0.0.1 frontend.gousto.local' >> /etc/hosts
      - run:
          name: Start local application
          working_directory: src/apps/webclient
          command: yarn start:with-static
          background: true
      - run:
          name: Wait for application to be ready
          working_directory: scripts
          command: ./waitForHttpPath.sh 80 / 10
      - when:
          condition:
            equal: [web, << parameters.platform >>]
          steps:
            - run:
                name: Run regression tests
                working_directory: << parameters.test_directory >>
                command: << parameters.test_command >>
                environment:
                  CYPRESS_baseUrl: << parameters.application_base_url >>
                  CYPRESS_platform: << parameters.platform >>
                  NODE_OPTIONS: << parameters.test_node_options >>
      - when:
          condition:
            equal: [mobile, << parameters.platform >>]
          steps:
            - run:
                name: Run regression tests
                working_directory: << parameters.test_directory >>
                command: << parameters.test_command >>
                environment:
                  CYPRESS_baseUrl: << parameters.application_base_url >>
                  CYPRESS_viewportWidth: 375
                  CYPRESS_viewportHeight: 667
                  CYPRESS_platform: << parameters.platform >>
                  NODE_OPTIONS: << parameters.test_node_options >>
      - run:
          name: Create reports
          when: on_fail
          working_directory: << parameters.test_directory >>
          command: yarn report
      - store_test_results:
          path: /mnt/ramdisk/tests/regression/test_results/cypress
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/reports/html
          destination: ./
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/videos
          destination: ./
      - store_artifacts:
          path: /mnt/ramdisk/tests/regression/screenshots
          destination: ./

  deploy-infrastructure-and-webclient-image:
    executor: gousto_platform_image #stock image missing boto
    resource_class: medium
    steps:
      - checkout # Required for BODA
      - attach_workspace:
          at: ~/
      - export_circlerc_vars
      - run:
          name: Run Cloudformation to set up infrastructure and deploy the webclient image to ECS
          command: python ./ci_scripts/deploy_service.py --service webclient

workflows:
  e2e-manual:
    when:
      equal: [TECH-10-remove-circle-ramdisk, << pipeline.git.branch >>]
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-beta-aws-app-circleci

      - install-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts

      - test-e2e:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

  regression-manual:
    when:
      equal: [TECH-10-remove-circle-ramdisk, << pipeline.git.branch >>]
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-beta-aws-app-circleci

      - install-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts

      - test-regression:
          name: test-regression-web
          platform: web
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

      - test-regression:
          name: test-regression-mobile
          platform: mobile
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

  lower-environment:
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-beta-aws-app-circleci
          <<: *filter-lower-env
      - install-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts
          <<: *filter-lower-env
      - build-webclient:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies
          <<: *filter-lower-env
      - upload-assets-to-s3:
          context: gousto-beta-aws-app-circleci
          env: ${ENVIRONMENT}
          requires:
            - build-webclient
          <<: *filter-lower-env
      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient
          <<: *filter-lower-env
      # - deploy-infrastructure-and-webclient-image:
      #     name: deploy-infrastructure-and-webclient-image-to-lower-environment
      #     context: gousto-beta-aws-app-circleci
      #     requires:
      #       - create-and-upload-webclient-docker-image-to-ecr
      #       - upload-assets-to-s3
      #     <<: *filter-lower-env

  staging-environment:
    when:
      equal: [TECH-10-remove-circle-ramdisk, << pipeline.git.branch >>]
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-beta-aws-app-circleci

      - install-dependencies:
          context: gousto-beta-aws-app-circleci
          requires:
            - setup-ci-variables-scripts

      - build-webclient:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

      - upload-source-maps-to-datadog:
          env: production
          context: gousto-prod-aws-app-circleci
          requires:
            - build-webclient

      - upload-assets-to-s3:
          name: Upload static assets to staging S3 /build/BUILD_NUMBER
          env: staging
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient

      # - upload-assets-to-s3:
      #     name: Upload static assets to production S3 /build/BUILD_NUMBER
      #     env: production
      #     context: gousto-prod-aws-app-circleci
      #     requires:
      #       - build-webclient

      - test-typecheck-and-report:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

      - eslint-generate-report:
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

      - test-regression:
          name: test-regression-web
          platform: web
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

      - test-regression:
          name: test-regression-mobile
          platform: mobile
          context: gousto-beta-aws-app-circleci
          requires:
            - install-dependencies

      - publish-code-health:
          context: gousto-beta-aws-app-circleci
          requires:
            - test-typecheck-and-report
            - eslint-generate-report

      - create-and-upload-webclient-docker-image-to-ecr:
          context: gousto-beta-aws-app-circleci
          requires:
            - build-webclient

      # - deploy-infrastructure-and-webclient-image:
      #     name: deploy-infrastructure-and-webclient-image-to-staging
      #     context: gousto-beta-aws-app-circleci
      #     requires:
      #       - create-and-upload-webclient-docker-image-to-ecr
      #       - "Upload static assets to staging S3 /build/BUILD_NUMBER"
      #       - "Upload static assets to production S3 /build/BUILD_NUMBER"

      - test-e2e:
          context: gousto-beta-aws-app-circleci
          requires:
            - create-and-upload-webclient-docker-image-to-ecr

  production-environment:
    when:
      equal: [TECH-10-remove-circle-ramdisk, << pipeline.git.branch >>]
    jobs:
      - setup-ci-variables-scripts:
          context: gousto-prod-aws-app-circleci

      # - deploy-infrastructure-and-webclient-image:
      #     name: deploy-infrastructure-and-webclient-image-to-production
      #     context: gousto-prod-aws-app-circleci
      #     requires:
      #       - setup-ci-variables-scripts
