import { List, Map, OrderedMap, fromJS } from 'immutable'
import { storeGetHelpOrder } from 'routes/GetHelp/actions/getHelp'
import { actionTypes } from 'routes/GetHelp/actions/actionTypes'
import { actionTypes as webClientActionTypes } from 'actions/actionTypes'
import { getHelp, getHelpInitialState } from 'reducers/getHelp'

const MOCK_ORDERS = [
  {
    id: '101',
    deliveryDate: '2019-09-07 00:00:00',
    deliverySlot: { id: '6', deliveryStart: '08:00:00', deliveryEnd: '19:00:00' },
    recipeItems: [
      {
        id: '43656080',
        recipeGoustoReference: '123',
        recipeId: '4001',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e8e',
        productId: null,
      },
      {
        id: '43656081',
        recipeGoustoReference: '456',
        recipeId: '4002',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e8f',
        productId: null,
      },
    ],
  },
  {
    id: '102',
    deliveryDate: '2019-09-14 00:00:00',
    deliverySlot: { id: '6', deliveryStart: '08:00:00', deliveryEnd: '19:00:00' },
    recipeItems: [
      {
        id: '43656082',
        recipeGoustoReference: '342',
        recipeId: '4003',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e90',
        productId: null,
      },
      {
        id: '43656083',
        recipeGoustoReference: '198',
        recipeId: '4004',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e91',
        productId: null,
      },
    ],
  },
]

describe('getHelp reducer', () => {
  let newState

  describe('given the action generated by storeGetHelpOrder is received', () => {
    const ORDER = {
      id: '100',
      recipeIds: ['10', '20', '30'],
      recipeDetailedItems: {
        10: '456',
        20: '123',
        30: '456',
      },
      deliverySlot: {
        deliveryEnd: '18:59:59',
        deliveryStart: '08:00:00',
      },
      deliveryDate: '25-05-21',
    }

    beforeEach(() => {
      newState = getHelp(getHelpInitialState, storeGetHelpOrder(ORDER))
    })

    test('the new state.order has the order stored, renaming recipeIds to recipeItems', () => {
      expect(newState.get('order')).toEqual(Map({
        id: ORDER.id,
        recipeItems: List(ORDER.recipeIds),
        recipeDetailedItems: Map(ORDER.recipeDetailedItems),
        deliverySlot: Map(ORDER.deliverySlot),
        deliveryDate: ORDER.deliveryDate,
      }))
    })
  })

  describe('given a GET_HELP_LOAD_ORDERS action type is received', () => {
    beforeEach(() => {
      newState = getHelp(getHelpInitialState, {
        type: actionTypes.GET_HELP_LOAD_ORDERS,
        orders: MOCK_ORDERS
      })
    })

    test('the new state.orders has the orders of the action stored', () => {
      const EXPECTED_REDUCED_ORDERS = OrderedMap({
        101: Map({
          deliveryDate: '2019-09-07 00:00:00',
          deliverySlot: Map({ deliveryEnd: '19:00:00', deliveryStart: '08:00:00' }),
          id: '101',
          recipeIds: List(['4001', '4002']),
          recipeDetailedItems: Map({
            4001: '123',
            4002: '456',
          }),
        }),
        102: Map({
          deliveryDate: '2019-09-14 00:00:00',
          deliverySlot: Map({ deliveryEnd: '19:00:00', deliveryStart: '08:00:00' }),
          id: '102',
          recipeIds: List(['4003', '4004']),
          recipeDetailedItems: Map({
            4003: '342',
            4004: '198',
          }),
        }),
      })
      expect(newState.get('orders')).toEqual(EXPECTED_REDUCED_ORDERS)
    })
  })

  describe('given an action with type GET_HELP_LOAD_ORDERS_BY_ID is received', () => {
    beforeEach(() => {
      newState = getHelp(getHelpInitialState, {
        type: webClientActionTypes.GET_HELP_LOAD_ORDERS_BY_ID,
        payload: { order: MOCK_ORDERS[0] },
      })
    })

    test('the new state.order has the order of the action stored', () => {
      const EXPECTED_REDUCED_ORDER = fromJS({
        deliverySlot: {
          deliveryStart: '08:00:00',
          deliveryEnd: '19:00:00' ,
        },
        id: '',
        recipeDetailedItems: { 4001: '123', 4002: '456' },
        recipeItems: ['4001', '4002'],
        deliveryDate: '2019-09-07 00:00:00',
        trackingUrl: '',
        hasPassedDeliveryValidation: false,
        deliveryCompensationAmount: null,
      })
      expect(newState.get('order')).toEqual(EXPECTED_REDUCED_ORDER)
    })
  })

  describe('given an action with type GET_HELP_LOAD_ORDER_AND_RECIPES_BY_IDS is received', () => {
    const FETCH_ORDER_RESPONSE = {
      data: {
        recipeItems: ['2871', '1783'],
        deliveryDate: '2021-05-01 00:00:00',
        deliverySlot: {
          deliveryEnd: '18:59:59',
          deliveryStart: '08:00:00',
        },
      }
    }
    const FETCH_RECIPES_RESPONSE = {
      data: [
        {
          id: '2871',
          title: 'Cheesy Pizza-Topped Chicken With Mixed Salad',
          url: 'gousto.co.uk/cookbook/recipes/cheesy-pizza-topped-chicken-with-mixed-salad',
          ingredients: [
            { uuid: '3139eeba-c3a1-477c-87e6-50ba5c3d21e0', label: '1 shallot' },
            { uuid: 'd93301c4-2563-4b9d-b829-991800ca87b4', label: 'mozzarella' },
          ],
          goustoReference: '2145',
        },
        {
          id: '1783',
          title: 'Sesame Tofu Nuggets, Wedges & Spicy Dipping Sauce',
          url: 'gousto.co.uk/cookbook/vegan-recipes/sesame-tofu-nuggets-wedges-spicy-dipping-sauce',
          ingredients: [
            { uuid: 'f0273bb0-bb2b-46e5-8ce4-7e09f413c97b', label: '1 spring onion' },
            { uuid: '4cd305c4-d372-4d9f-8110-dae88209ce57', label: '1 carrot' },
          ],
          goustoReference: '5678',
        },
      ]
    }

    beforeEach(() => {
      newState = getHelp(getHelpInitialState, {
        type: actionTypes.GET_HELP_LOAD_ORDER_AND_RECIPES_BY_IDS,
        payload: { order: FETCH_ORDER_RESPONSE.data, recipes: FETCH_RECIPES_RESPONSE.data },
      })
    })

    test('the new state.order has the order of the action stored', () => {
      const EXPECTED_REDUCED_ORDER = fromJS({
        deliverySlot: {
          deliveryStart: '08:00:00',
          deliveryEnd: '18:59:59',
        },
        id: '',
        recipeDetailedItems: { 2871: '2145', 1783: '5678' },
        recipeItems: ['2871', '1783'],
        deliveryDate: '2021-05-01 00:00:00',
        trackingUrl: '',
        hasPassedDeliveryValidation: false,
        deliveryCompensationAmount: null,
      })
      expect(newState.get('order')).toEqual(EXPECTED_REDUCED_ORDER)
    })

    test('the new state.recipes has the recipes of the action stored', () => {
      const EXPECTED_REDUCED_RECIPES = fromJS([
        {
          id: '2871',
          title: 'Cheesy Pizza-Topped Chicken With Mixed Salad',
          ingredients: [
            { uuid: '3139eeba-c3a1-477c-87e6-50ba5c3d21e0', label: '1 shallot', url: 'gousto.co.uk/cookbook/recipes/cheesy-pizza-topped-chicken-with-mixed-salad' },
            { uuid: 'd93301c4-2563-4b9d-b829-991800ca87b4', label: 'mozzarella', url: 'gousto.co.uk/cookbook/recipes/cheesy-pizza-topped-chicken-with-mixed-salad' },
          ],
          url: 'gousto.co.uk/cookbook/recipes/cheesy-pizza-topped-chicken-with-mixed-salad',
          goustoReference: '2145',
        },
        {
          id: '1783',
          title: 'Sesame Tofu Nuggets, Wedges & Spicy Dipping Sauce',
          ingredients: [
            { uuid: 'f0273bb0-bb2b-46e5-8ce4-7e09f413c97b', label: '1 spring onion', url: 'gousto.co.uk/cookbook/vegan-recipes/sesame-tofu-nuggets-wedges-spicy-dipping-sauce' },
            { uuid: '4cd305c4-d372-4d9f-8110-dae88209ce57', label: '1 carrot', url: 'gousto.co.uk/cookbook/vegan-recipes/sesame-tofu-nuggets-wedges-spicy-dipping-sauce' },
          ],
          url: 'gousto.co.uk/cookbook/vegan-recipes/sesame-tofu-nuggets-wedges-spicy-dipping-sauce',
          goustoReference: '5678',
        },
      ])
      expect(newState.get('recipes')).toEqual(EXPECTED_REDUCED_RECIPES)
    })
  })

  describe('given an action with type GET_HELP_LOAD_TRACKING_URL is received', () => {
    const TRACKING_URL = 'https://nice-courier.com/order/12345'

    beforeEach(() => {
      newState = getHelp(getHelpInitialState, {
        type: actionTypes.GET_HELP_LOAD_TRACKING_URL,
        payload: {
          trackingUrl: TRACKING_URL,
        }
      })
    })

    test('the tracking url in the action payload is stored in the new state.order.trackingUrl', () => {
      expect(newState.getIn(['order', 'trackingUrl']))
        .toEqual(TRACKING_URL)
    })
  })

  describe('given an action with type GET_HELP_VALIDATE_DELIVERY is received', () => {
    const COMPENSATION_AMOUNT = 25

    beforeEach(() => {
      newState = getHelp(getHelpInitialState, {
        type: actionTypes.GET_HELP_VALIDATE_DELIVERY,
        payload: {
          compensation: COMPENSATION_AMOUNT,
          isValid: true,
        }
      })
    })

    test('the status of delivery validation check in the action payload is stored in the new state.order.hasPassedDeliveryValidation', () => {
      expect(newState.getIn(['order', 'hasPassedDeliveryValidation']))
        .toEqual(true)
    })

    test('the delivery compensation amount is stored in the new state.order.deliveryCompensationAmount', () => {
      expect(newState.getIn(['order', 'deliveryCompensationAmount']))
        .toEqual(COMPENSATION_AMOUNT)
    })
  })

  describe('given an action with type GET_HELP_VALIDATE_ORDER is received', () => {
    describe('when the payload does not contain ineligibleIngredientUuids', () => {
      beforeEach(() => {
        newState = getHelp(getHelpInitialState, {
          type: webClientActionTypes.GET_HELP_VALIDATE_ORDER,
        })
      })

      test('ineligibleIngredientUuids state is set as an empty array', () => {
        expect(newState.get('ineligibleIngredientUuids').toJS()).toEqual([])
      })
    })

    describe('when there is a payload', () => {
      const INELIGIBLE_INGREDIENT_UUIDS = ['4e949ce8-d92c-43fa-8c0d-110d903d6e60', '90ea17bd-204c-4ded-9dac-12df03f265d6']

      beforeEach(() => {
        newState = getHelp(getHelpInitialState, {
          type: webClientActionTypes.GET_HELP_VALIDATE_ORDER,
          ineligibleIngredientUuids: INELIGIBLE_INGREDIENT_UUIDS
        })
      })

      test('ineligibleIngredientUuids state is set as that payload', () => {
        expect(newState.get('ineligibleIngredientUuids').toJS()).toEqual(INELIGIBLE_INGREDIENT_UUIDS)
      })
    })
  })
})
