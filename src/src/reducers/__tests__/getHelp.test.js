import { List, Map, OrderedMap } from 'immutable'
import { storeGetHelpOrder } from 'routes/GetHelp/actions/getHelp'
import { actionTypes } from 'routes/GetHelp/actions/actionTypes'
import { getHelp, getHelpInitialState } from 'reducers/getHelp'

const MOCK_ORDERS = [
  {
    id: '101',
    deliveryDate: '2019-09-07 00:00:00',
    deliverySlot: { id: '6', deliveryStart: '08:00:00', deliveryEnd: '19:00:00' },
    recipeItems: [
      {
        id: '43656080',
        recipeId: '4001',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e8e',
        productId: null,
      },
      {
        id: '43656081',
        recipeId: '4002',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e8f',
        productId: null,
      },
    ],
  },
  {
    id: '102',
    deliveryDate: '2019-09-14 00:00:00',
    deliverySlot: { id: '6', deliveryStart: '08:00:00', deliveryEnd: '19:00:00' },
    recipeItems: [
      {
        id: '43656082',
        recipeId: '4003',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e90',
        productId: null,
      },
      {
        id: '43656083',
        recipeId: '4004',
        recipeUuid: '4b77e742-fe81-46b1-ba27-075473ee2e91',
        productId: null,
      },
    ],
  },
]

describe('getHelp reducer', () => {
  let newState

  describe('given the action generated by storeGetHelpOrder is received', () => {
    const ORDER = { id: '100', recipeIds: ['10', '20', '30'] }

    beforeEach(() => {
      newState = getHelp(getHelpInitialState, storeGetHelpOrder(ORDER))
    })

    test('the new state.order has the order stored, renaming recipeIds to recipeItems', () => {
      expect(newState.get('order')).toEqual(Map({
        id: ORDER.id,
        recipeItems: List(ORDER.recipeIds),
      }))
    })
  })

  describe('given a GET_HELP_LOAD_ORDERS action type is received', () => {
    beforeEach(() => {
      newState = getHelp(getHelpInitialState, {
        type: actionTypes.GET_HELP_LOAD_ORDERS,
        orders: MOCK_ORDERS
      })
    })

    test('the new state.orders has the orders of the action stored', () => {
      const EXPECTED_REDUCED_ORDERS = OrderedMap({
        101: Map({
          deliveryDate: '2019-09-07 00:00:00',
          deliverySlot: Map({ deliveryEnd: '19:00:00', deliveryStart: '08:00:00' }),
          id: '101',
          recipeIds: List(['4001', '4002']),
        }),
        102: Map({
          deliveryDate: '2019-09-14 00:00:00',
          deliverySlot: Map({ deliveryEnd: '19:00:00', deliveryStart: '08:00:00' }),
          id: '102',
          recipeIds: List(['4003', '4004']),
        }),
      })
      expect(newState.get('orders')).toEqual(EXPECTED_REDUCED_ORDERS)
    })
  })
})
